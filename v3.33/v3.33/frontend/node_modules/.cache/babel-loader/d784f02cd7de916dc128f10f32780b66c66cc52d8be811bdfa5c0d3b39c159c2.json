{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Store reference for accessing Redux state\nlet store = null;\nexport const injectStore = _store => {\n  store = _store;\n};\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token and Ollama API URL to requests if they exist\napi.interceptors.request.use(config => {\n  var _store2;\n  const token = localStorage.getItem('token');\n  const ollamaApiUrl = (_store2 = store) === null || _store2 === void 0 ? void 0 : _store2.getState().settings.ollamaApiUrl;\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  if (ollamaApiUrl) {\n    config.headers['x-ollama-api-url'] = ollamaApiUrl;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Handle response errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  getProfile: () => api.get('/auth/profile'),\n  updatePreferences: preferences => api.put('/auth/preferences', {\n    preferences\n  }),\n  updateProfile: profileData => api.put('/auth/profile', profileData)\n};\n\n// Models API\nexport const modelsAPI = {\n  getAll: () => api.get('/models'),\n  getOne: modelName => api.get(`/models/${modelName}`),\n  download: modelName => api.post(`/models/${modelName}/download`),\n  delete: modelName => api.delete(`/models/${modelName}`),\n  search: query => api.get('/models/search', {\n    params: {\n      query\n    }\n  }),\n  update: (modelName, data) => api.put(`/models/${modelName}`, data)\n};\n\n// Ollama API\nexport const ollamaAPI = {\n  getStatus: () => api.get('/ollama/status'),\n  getEndpoints: () => api.get('/ollama/endpoints'),\n  listModels: () => api.get('/ollama/models'),\n  pullModel: name => api.post('/ollama/models/pull', {\n    name\n  }),\n  generateText: (model, prompt, options) => api.post('/ollama/generate', {\n    model,\n    prompt,\n    options\n  }),\n  chat: (model, messages) => api.post('/ollama/chat', {\n    model,\n    messages\n  }),\n  getModelInfo: modelName => api.get(`/ollama/models/${modelName}`),\n  createModelCopy: (source, destination) => api.post('/ollama/models/copy', {\n    source,\n    destination\n  })\n};\n\n// Error handler helper\nexport const handleApiError = error => {\n  var _error$response2, _error$response2$data, _error$response3, _error$response4;\n  const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'An error occurred';\n  const status = (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status;\n  const data = (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data;\n  return {\n    message,\n    status,\n    data\n  };\n};\n\n// Success response helper\nexport const handleApiSuccess = response => {\n  var _response$data;\n  return {\n    data: response.data,\n    status: response.status,\n    message: (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message\n  };\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","store","injectStore","_store","api","create","baseURL","headers","interceptors","request","use","config","_store2","token","localStorage","getItem","ollamaApiUrl","getState","settings","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","register","userData","getProfile","get","updatePreferences","preferences","put","updateProfile","profileData","modelsAPI","getAll","getOne","modelName","download","delete","search","query","params","update","data","ollamaAPI","getStatus","getEndpoints","listModels","pullModel","name","generateText","model","prompt","options","chat","messages","getModelInfo","createModelCopy","source","destination","handleApiError","_error$response2","_error$response2$data","_error$response3","_error$response4","message","handleApiSuccess","_response$data"],"sources":["C:/Users/WORK/Desktop/ProjectsNew/v3.33/frontend/src/api/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Store reference for accessing Redux state\r\nlet store = null;\r\nexport const injectStore = _store => {\r\n  store = _store;\r\n};\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add token and Ollama API URL to requests if they exist\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    const ollamaApiUrl = store?.getState().settings.ollamaApiUrl;\r\n    \r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    if (ollamaApiUrl) {\r\n      config.headers['x-ollama-api-url'] = ollamaApiUrl;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Handle response errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  getProfile: () => api.get('/auth/profile'),\r\n  updatePreferences: (preferences) => api.put('/auth/preferences', { preferences }),\r\n  updateProfile: (profileData) => api.put('/auth/profile', profileData)\r\n};\r\n\r\n// Models API\r\nexport const modelsAPI = {\r\n  getAll: () => api.get('/models'),\r\n  getOne: (modelName) => api.get(`/models/${modelName}`),\r\n  download: (modelName) => api.post(`/models/${modelName}/download`),\r\n  delete: (modelName) => api.delete(`/models/${modelName}`),\r\n  search: (query) => api.get('/models/search', { params: { query } }),\r\n  update: (modelName, data) => api.put(`/models/${modelName}`, data)\r\n};\r\n\r\n// Ollama API\r\nexport const ollamaAPI = {\r\n  getStatus: () => api.get('/ollama/status'),\r\n  getEndpoints: () => api.get('/ollama/endpoints'),\r\n  listModels: () => api.get('/ollama/models'),\r\n  pullModel: (name) => api.post('/ollama/models/pull', { name }),\r\n  generateText: (model, prompt, options) => \r\n    api.post('/ollama/generate', { model, prompt, options }),\r\n  chat: (model, messages) => \r\n    api.post('/ollama/chat', { model, messages }),\r\n  getModelInfo: (modelName) => api.get(`/ollama/models/${modelName}`),\r\n  createModelCopy: (source, destination) => \r\n    api.post('/ollama/models/copy', { source, destination })\r\n};\r\n\r\n// Error handler helper\r\nexport const handleApiError = (error) => {\r\n  const message = error.response?.data?.message || error.message || 'An error occurred';\r\n  const status = error.response?.status;\r\n  const data = error.response?.data;\r\n\r\n  return {\r\n    message,\r\n    status,\r\n    data\r\n  };\r\n};\r\n\r\n// Success response helper\r\nexport const handleApiSuccess = (response) => {\r\n  return {\r\n    data: response.data,\r\n    status: response.status,\r\n    message: response.data?.message\r\n  };\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,IAAIC,KAAK,GAAG,IAAI;AAChB,OAAO,MAAMC,WAAW,GAAGC,MAAM,IAAI;EACnCF,KAAK,GAAGE,MAAM;AAChB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGR,KAAK,CAACS,MAAM,CAAC;EACvBC,OAAO,EAAET,OAAO;EAChBU,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EAAA,IAAAC,OAAA;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,YAAY,IAAAJ,OAAA,GAAGX,KAAK,cAAAW,OAAA,uBAALA,OAAA,CAAOK,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAACF,YAAY;EAE5D,IAAIH,KAAK,EAAE;IACTF,MAAM,CAACJ,OAAO,CAACY,aAAa,GAAG,UAAUN,KAAK,EAAE;EAClD;EACA,IAAIG,YAAY,EAAE;IAChBL,MAAM,CAACJ,OAAO,CAAC,kBAAkB,CAAC,GAAGS,YAAY;EACnD;EACA,OAAOL,MAAM;AACf,CAAC,EACAS,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhB,GAAG,CAACI,YAAY,CAACe,QAAQ,CAACb,GAAG,CAC1Ba,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCX,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAK5B,GAAG,CAAC6B,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;EAC5DE,QAAQ,EAAGC,QAAQ,IAAK/B,GAAG,CAAC6B,IAAI,CAAC,gBAAgB,EAAEE,QAAQ,CAAC;EAC5DC,UAAU,EAAEA,CAAA,KAAMhC,GAAG,CAACiC,GAAG,CAAC,eAAe,CAAC;EAC1CC,iBAAiB,EAAGC,WAAW,IAAKnC,GAAG,CAACoC,GAAG,CAAC,mBAAmB,EAAE;IAAED;EAAY,CAAC,CAAC;EACjFE,aAAa,EAAGC,WAAW,IAAKtC,GAAG,CAACoC,GAAG,CAAC,eAAe,EAAEE,WAAW;AACtE,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG;EACvBC,MAAM,EAAEA,CAAA,KAAMxC,GAAG,CAACiC,GAAG,CAAC,SAAS,CAAC;EAChCQ,MAAM,EAAGC,SAAS,IAAK1C,GAAG,CAACiC,GAAG,CAAC,WAAWS,SAAS,EAAE,CAAC;EACtDC,QAAQ,EAAGD,SAAS,IAAK1C,GAAG,CAAC6B,IAAI,CAAC,WAAWa,SAAS,WAAW,CAAC;EAClEE,MAAM,EAAGF,SAAS,IAAK1C,GAAG,CAAC4C,MAAM,CAAC,WAAWF,SAAS,EAAE,CAAC;EACzDG,MAAM,EAAGC,KAAK,IAAK9C,GAAG,CAACiC,GAAG,CAAC,gBAAgB,EAAE;IAAEc,MAAM,EAAE;MAAED;IAAM;EAAE,CAAC,CAAC;EACnEE,MAAM,EAAEA,CAACN,SAAS,EAAEO,IAAI,KAAKjD,GAAG,CAACoC,GAAG,CAAC,WAAWM,SAAS,EAAE,EAAEO,IAAI;AACnE,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG;EACvBC,SAAS,EAAEA,CAAA,KAAMnD,GAAG,CAACiC,GAAG,CAAC,gBAAgB,CAAC;EAC1CmB,YAAY,EAAEA,CAAA,KAAMpD,GAAG,CAACiC,GAAG,CAAC,mBAAmB,CAAC;EAChDoB,UAAU,EAAEA,CAAA,KAAMrD,GAAG,CAACiC,GAAG,CAAC,gBAAgB,CAAC;EAC3CqB,SAAS,EAAGC,IAAI,IAAKvD,GAAG,CAAC6B,IAAI,CAAC,qBAAqB,EAAE;IAAE0B;EAAK,CAAC,CAAC;EAC9DC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAAM,EAAEC,OAAO,KACnC3D,GAAG,CAAC6B,IAAI,CAAC,kBAAkB,EAAE;IAAE4B,KAAK;IAAEC,MAAM;IAAEC;EAAQ,CAAC,CAAC;EAC1DC,IAAI,EAAEA,CAACH,KAAK,EAAEI,QAAQ,KACpB7D,GAAG,CAAC6B,IAAI,CAAC,cAAc,EAAE;IAAE4B,KAAK;IAAEI;EAAS,CAAC,CAAC;EAC/CC,YAAY,EAAGpB,SAAS,IAAK1C,GAAG,CAACiC,GAAG,CAAC,kBAAkBS,SAAS,EAAE,CAAC;EACnEqB,eAAe,EAAEA,CAACC,MAAM,EAAEC,WAAW,KACnCjE,GAAG,CAAC6B,IAAI,CAAC,qBAAqB,EAAE;IAAEmC,MAAM;IAAEC;EAAY,CAAC;AAC3D,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIlD,KAAK,IAAK;EAAA,IAAAmD,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,gBAAA;EACvC,MAAMC,OAAO,GAAG,EAAAJ,gBAAA,GAAAnD,KAAK,CAACG,QAAQ,cAAAgD,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBlB,IAAI,cAAAmB,qBAAA,uBAApBA,qBAAA,CAAsBG,OAAO,KAAIvD,KAAK,CAACuD,OAAO,IAAI,mBAAmB;EACrF,MAAMlD,MAAM,IAAAgD,gBAAA,GAAGrD,KAAK,CAACG,QAAQ,cAAAkD,gBAAA,uBAAdA,gBAAA,CAAgBhD,MAAM;EACrC,MAAM4B,IAAI,IAAAqB,gBAAA,GAAGtD,KAAK,CAACG,QAAQ,cAAAmD,gBAAA,uBAAdA,gBAAA,CAAgBrB,IAAI;EAEjC,OAAO;IACLsB,OAAO;IACPlD,MAAM;IACN4B;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMuB,gBAAgB,GAAIrD,QAAQ,IAAK;EAAA,IAAAsD,cAAA;EAC5C,OAAO;IACLxB,IAAI,EAAE9B,QAAQ,CAAC8B,IAAI;IACnB5B,MAAM,EAAEF,QAAQ,CAACE,MAAM;IACvBkD,OAAO,GAAAE,cAAA,GAAEtD,QAAQ,CAAC8B,IAAI,cAAAwB,cAAA,uBAAbA,cAAA,CAAeF;EAC1B,CAAC;AACH,CAAC;AAED,eAAevE,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}